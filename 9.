#include<stdio.h>
#include<stdlib.h>

struct node
{
	int info;
	struct node *link;
};

typedef struct node *NODE;

NODE getnode()
{
	NODE x;
	x = (NODE) malloc(sizeof(struct node));
	
	if(x == NULL)
	{
		printf("Node creation error\n");
		return 0;
	}
	return x;
}

NODE insert_position(NODE first, int item, int pos)
{
	int count = 1;
	NODE temp, cur, prev;
	
	temp = getnode();
	temp->info = item;
	temp->link = NULL;
	
	if(first == NULL && pos == 1)
		return temp;
	
	if(first == NULL && pos > 1)
	{
		printf("Invalid position\n");
		free(temp);
		return first;
	}
	
	if(pos == 1)
	{
		temp->link = first;
		return temp;
	}
	
	cur = first;
	prev = NULL;
	
	while(cur != NULL && pos != count)
	{
		prev = cur;
		cur = cur->link;
		count++;
	}
	
	if(cur == NULL && pos > count)
	{
		printf("Invalid position\n");
		free(temp);
		return first;
	}
	
	prev->link = temp;
	temp->link = cur;
	return first;
}
NODE delete_rear(NODE first)
{
	NODE current, prev;
	
	if (first == NULL)
	{
		printf("Cannot delete. List is empty\n");
		return first;
	}
	
	if(first->link == NULL)
	{
		printf("Deleted item is %d\n", first->info);
		free(first);
		first = NULL;
		
		return first;
	}
	
	current = first;
	prev = NULL;
	
	while(current->link != NULL)
	{	
		prev = current;
		current = current->link;	
	}
	
	printf("Deleted item is %d\n", current->info);
	free(current);
	prev->link = NULL;
	
	return first;
}
 void display(NODE first)
{
NODE cur;
if(first==NULL)
{
printf("empty list\n");
return ;
}
for(cur=first;cur!=NULL;cur=cur->link)
{
printf("%d\t",cur->info);
}
}
void main()
{
	int item, pos, choice;
	NODE first=NULL;

	for(;;)
	{
		printf("Enter the choice\n");
		printf("1. Insert position\n2. Delete position\n");
		printf("3. Display\n4. Exit\n");
		scanf("%d", &choice);
		
		switch(choice)
		{
			case 1:	printf("Enter the item to be inserted\n");
				scanf("%d", &item);
				printf("Enter the position\n");
				scanf("%d", &pos);
				first = insert_position(first, item, pos);
				break;
			
			case 2: 
				first = delete_rear(first);
				break;
			
			case 3: display(first);
				break;
			default:	exit(0);
		}
	}
}


