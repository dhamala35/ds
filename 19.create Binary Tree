#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<malloc.h>
struct node
{
    int info;
    struct node *llink;
    struct node *rlink;

};
typedef struct node *NODE;
NODE getnode()
{
    NODE x;
    x=(NODE)malloc(sizeof(struct node));
    if(x==NULL)
    {
        printf("Memory allocation not possible\n");
        exit(0);
    }
    return x;
}

NODE insert(NODE root,int item)
{
    NODE temp,cur,prev;
    char direction[10];
    int i;

    temp=getnode();
    temp->info=item;
    temp->llink=NULL;
    temp->rlink=NULL;

    if(root==NULL) return temp;

    printf("Enter the directon\n");
    scanf("%s",direction);

    prev=NULL;
    cur=root;

    for(i=0;i<strlen(direction);i++)
    {
        if(cur==NULL) break;

        prev=cur;
        if(direction[i]=='L')
            cur=cur->llink;
        else
            cur=cur->rlink;

    }
    if(cur!=NULL || i!=strlen(direction))
    {
        printf("Invalid position\n");
        free(temp);
        return root;
    }
    if(direction[i-1]=='L')
        prev->llink=temp;
    else
        prev->rlink=temp;
    return root;
}

void preorder(NODE root)
{
    if(root==NULL) return;
    printf("%d",root->info);
    preorder(root->llink);
    preorder(root->rlink);
}
void postorder(NODE root)
{
    if(root==NULL) return;

    preorder(root->llink);
    preorder(root->rlink);
     printf("%d",root->info);
}

void inorder(NODE root)
{
    if(root==NULL) return;

    preorder(root->llink);
    printf("%d",root->info);
    preorder(root->rlink);
}
void display(NODE root,int level)
{
    int i;
    if(root==NULL) return;
    display(root->rlink,level+1);
    for(i=0;i<level;i++) printf("  ");
    printf("%d\n",root->info);
    display(root->llink,level+1);
}
int main()
{
    int choice,item;
    NODE root=NULL;

    for(;;)
    {

        printf("\n1.Create\t2.preorder\t3.postorder\t4.Inorder\t5.Exit\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:printf("Enter the item to insert\n");
                    scanf("%d",&item);
                    root=insert(root,item);
                    break;
             case 2:if(root==NULL)
                    printf("tree is empty\n");
                    else
                    {
                        printf("The given tree is\n");
                        display(root,1);

                        preorder(root);
                         printf("\n");
                    }
                        break;

             case 3:if(root==NULL)
                    printf("tree is empty\n");
                    else
                    {
                        printf("The given tree is\n");
                    display(root,1);

                    postorder(root);
                    printf("\n");
                    }
                        break;
             case 4:if(root==NULL)
                    printf("tree is empty\n");
                    else
                    {
                        printf("The given tree is\n");
                    display(root,1);

                    inorder(root);
                    printf("\n");
                    }
                        break;

            default:exit(0);
        }
    }
}
